[{"id":0,"href":"/about/","title":"About","section":"Rick's Blog","content":"Email: tianjiawei@gmail.com\n"},{"id":1,"href":"/docs/MySQL/InnoDB/1_overview/","title":"1 Overview","section":"Inno Db","content":"Heikki Tuuri是InnoDB存储引擎的创始人，1964年生于芬兰赫尔辛基。与著名Linux操作系统的创始人Linus一样毕业于芬兰赫尔辛基大学。从入学时间来看，Heikki Tuuri还是Linus的学长。在1990年取得赫尔辛基大学的数理逻辑博士学位后。\n所以，innodb的代码大部分都是Created mm/dd/YYYY Heikki Tuuri。\nMySQL大事时间表：\n 1995：Heikki Tuuri成立Innobase Oy公司并担任CEO。同年，由David Axmark、Allan Larsson和Michael Monty Widenius在瑞典创办MySQL AB公司。 2001：Innobase公司开始与MySQL AB公司进行合作并开源InnoDB存储引擎的代码。 2005：Oracle公司收购了Innobase公司。 2008：Sun收购MySQL AB公司。 2009：2009年4月20日，Sun 公司董事会通过决议，同意以每股9.5美元的价格将公司出售给Oracle。  "},{"id":2,"href":"/docs/MySQL/InnoDB/2_source/","title":"2 Source","section":"Inno Db","content":"typora-root-url: ../../../../static\n在MySQL源代码中，每个模块都有自己单独的目录存放，里面按照模块名0子模块名.cc来组织。所有头文件都放在include目录下，同时include目录下还有*.ic的文件，这个文件中存放定义的内联函数。\n如果要在*.ic中使用宏UNIV_INLINE定义内联，需要#include \u0026ldquo;univ.i\u0026rdquo;，即\n#include \u0026#34;univ.i\u0026#34;UNIV_INLINE return_value function foo(param1, ...) ``// 函数声明或实现 { ``... } 注意，这种风格只是适用于c函数，对于ic文件中的类成员函数定义，还是需要手动写inline  univ.i中UNIV_INLINE的宏定义\n#ifndef UNIV_MUST_NOT_INLINE /* Definition for inline version */ #define UNIV_INLINE static inline #else /* !UNIV_MUST_NOT_INLINE *//* If we want to compile a noninlined version we use the following macro definitions: */ #define UNIV_NONINL #define UNIV_INLINE #endif /* !UNIV_MUST_NOT_INLINE */阅读源码层次\n推荐从下至上进行逐层阅读\n最下一层是基础管理模块：\n File Manager主要封装了InnoDB对于文件的各类操作，如读、写、异步I/O等。 Concurrency Manager模块主要封装了引擎内部使用的各类mutex和latch。 Common Utility模块用于一些基本数据结构与算法的定义，如链表、哈希表等。  图中间虚线标注的部分为InnoDB的内核实现，也就是InnoDB存储引擎中的事务、锁、缓冲区、日志、存储管理、资源管理、索引、change buffer模块，这部分是整个存储引擎的核心。\n图最上面的两层是接口层，通过这些接口实现server层与存储引擎的交互。InnoDB存储引擎可以不依赖MySQL数据库，而作为一个嵌入式数据库存在，因此还存在嵌入式的API接口。\n详细的目录（模块）说明如下：\n   目录 说明 文件      ut 基本数据结构和算法 ut0byteut0crc32ut0dbgut0listut0lstut0memut0newut0rbtut0rndut0vecut0wqueue 内存双向链表 ib_list内存双向链表 ut_list   mem 内存管理 mem0mem 内存管理   os 进程控制 univos0atomicos0eventos0fileos0procos0thread 定义了POD、编译器hint、代码段宏Atomic Read-Modify-WriteOS Event getpid、大页分配内存PSI key、进程控制原语   sync 同步机制 ut0mutexsync0arrsync0debugsync0rwsync0syncsync0policy 定义了mutex的宏、mutex_init()和mutex_destroy()、MutexMonitor MutexDebug   log 日志及恢复 log0loglog0recv 重做日志恢复   mtr mini-transaction mtr0typemtr0mtrmtr0logdyn0buf mtr相关定义mtr基本操作mtr日志操作mtr_buf_t   fsp 存储管理 fsp0filefsp0fspfsp0spacefsp0sysspace 数据文件物理文件结构与实现表空间系统表空间   fil 文件管理 fil0filos0file 文件内存数据结构及相关文件操作底层文件操作实现   fut  fut0lstfut0fut 磁盘双向链表 flst   data 逻辑记录 data0datadata0typedata0types 逻辑记录逻辑记录的操作逻辑记录数据结构   rem 物理记录 rem0recrem0cmprem0types 物理记录物理记录的比较物理记录数据结构   page 索引页 page0curpage0pagepage0typespage0sizepage0zip 索引页中记录的定位、插入、删除索引页的维护类型定义   lock 锁 lock0locklock0iterlock0prdtlock0waitlock0typeslock0priv 锁模式   btr B+树 btr0btrbtr0bulkbtr0curbtr0pcurbtr0sea    buf 缓冲池 buf0buddybuf0bufbuf0checksumbuf0dblwrbuf0dumpbuf0flubuf0lrubuf0rea    dict 数据字典 dict0bootdict0creadict0dictdict0loaddict0memdict0statsdict0stats_bg    ibuf change buffer ibuf0ibuf    row  row0extrow0ftsortrow0importrow0insrow0logrow0mergerow0mysqlrow0purgerow0quiescerow0rowrow0selrow0truncrow0uninsrow0umodrow0undorow0updrow0vars    trx 事务 trx0i_strx0purgetrx0rectrx0rolltrx0rsegtrx0systrx0trxtrx0undo    handler  ha_innodbha_innoparthandler0alteri_s    read  read0read    api  api0apiapi0misc    eval  eval0evaleval0misc    ha  ha0haha0storagehash0hash    mach  mach0data    pars  lexyypars0grmpars0lexpars0optpars0parspars0sym    que  que0que    srv  srv0concsrv0monsrv0srvsrv0start    usr  usr0sess    gis  gis0geogis0rtreegis0sea    fts  fts0astfts0blexfts0configfts0ftsfts0optfts0parsfts0pluginfts0quefts0sqlfts0tlex        目录 文件 说明     fut fut0fut File-based utilities   fu0lst File-based list utilities    ha ha0ha The hash table with external chains   ha0storage Hash storage    hash0hash The simple hash table utility    mem mem0mem The memory management   ut ut0byte Byte utilities        ut0crc32 CRC32    ut0dbg Debug utilities for Innobase.    ut0list A double-linked list    ut0mem Memory primitives    ut0new Instrumented memory allocator.    ut0rbt Red-Black tree implementation    ut0rnd Random numbers and hashing    ut0ut Various utilities for Innobase.    ut0vec A vector of pointers to data items    ut0wqueue work queue.          db0err Error Codes\neval\nFile Name What Name Stands For Size Comment Inside File --------- -------------------- ------ ------------------- eval0eval.c Evaluating/Evaluating 17,061 SQL evaluator eval0proc.c Evaluating/Procedures 5,001 Executes SQL procedures The evaluating step is a late part of the process of interpreting an SQL statement \u0026mdash; parsing has already occurred during \\pars (PARSING).\nThe ability to execute SQL stored procedures is an InnoDB feature, but MySQL handles stored procedures in its own way, so the eval0proc.c program is unimportant.\n代码风格 #  InnoDB的代码缩进风格更接近于K\u0026amp;R风格：所有的非函数语句块（if、switch、for、while、do），起始大括号放在行尾，而把结束大括号放在行首。函数开头的左花括号放到最左边。\n此外，每个文件都包含一段简短说明其功能的注释开头，同时每个函数也注释说明函数的功能，需要哪些种类的参数，参数可能值的含义以及用途。最后，对于变量的声明，使用下画线以分隔单词，坚持使用小写，并把大写字母留给宏和枚举常量。\n"},{"id":3,"href":"/docs/MySQL/InnoDB/5_record/","title":"5 Record","section":"Inno Db","content":"设计 #  MySQL主要面向的是OLTP场景，所以数据记录采用行存（NSM - n-ary storage model）。\n基于行进行存储有以下几个好处：\n 记录存放在一个页中，存储一条记录需要访问的页面较少 符合传统机械硬盘的访问方式 易于理解，数据的存取就像是对一张二维表进行访问  在整体上看，表中的数据是按照如下形式组织的：\n那我们如何来理解记录呢？\n首先，在关系数据库系统理论中，通常用元组（tuple）描述记录，用字段（field）描述列，每个元组由多个字段组成，每个表由多个元组组成。\n行和元组在意义上是相等的。但是更愿意将行（row）理解为物理记录，将元组（tuple）理解为逻辑记录。物理记录为行实际存放在物理存储中的格式，其内容由二进制字符串组成，可读性差。逻辑记录则容易理解的多，每张表中的多个记录就像是一个数组。由于其只是“逻辑”上的含义，因此逻辑记录只是物理记录在内存中的表现形式，实际并不占用任何的物理存储空间。\n关系如下图所示：\n物理记录和逻辑记录的差异如下：\n    物理记录 逻辑记录     可读性 差 好   存储位置 磁盘 内存   亲和性 对存储友好（更紧凑） 对查找友好（更易寻址）   存储内容 除记录中的列数据外，还有一些额外信息 元组    这两种记录之间本身可以互相转换。比如，在插入一条记录时，原来没有数据，首先需要根据插入的记录构造一个逻辑记录，然后再存放到磁盘上。对于读取，要从磁盘上seek出来相应的数据页，再将页中的物理记录转换成逻辑记录展现给用户。\n除此之外，在MySQL server层也需要在binlog中记录数据的变化，也需要一种行格式。因此，在MySQL中，行格式一共有3种存储方式：\n Server层格式：与存储引擎无关，server层的binlog行格式（Row-Base Replication下的binlog格式） 逻辑记录格式：tuple，也称为索引元组格式（因为InnoDB是IOT）。在同一个表中，不同索引对应的元组是不同的 物理记录格式：record，也称为physical record  物理记录的设计 #  物理记录承载着数据的最终存储，因此，我们首先讨论物理记录。\n磁盘上的物理记录需要面向计算机友好，更紧凑、强调IO性能，以及在此基础上支持事务语义。\n目标：\n 描述行存的数据 适配存储引擎的结构 查找快 DML快 事务语义 更少的资源占用（disk、buffer pool、update I/O）  逻辑记录的设计 #  磁盘上的物理记录面向的是计算机友好的，更紧凑、高IO性能。同时，为了性能的考虑，数据也需要常驻内存（buffer pool），所以需要设计数据结构用于表述记录，这被称为tuple（元组），也称为逻辑记录。\n实现 #  InnoDB存储引擎中的表使用的是索引组织表（Index Organized Table - IOT），这意味着表中的所有数据是按照B+树的方式进行存储的，行数据存在在B+树的叶子节点上，即使创建表时没有显式指定主键索引，也会自动创建一个6字节的隐藏列，用作主键索引。\n2.1 Redundant行格式 #  从上面我们可以得知，物理记录由3部分组成：\n2.1.1 sdfs #  sdfs\n"},{"id":4,"href":"/docs/MySQL/InnoDB/6_page/","title":"6 Page","section":"Inno Db","content":"索引页 #  InnoDB存储引擎是索引组织表，因此聚簇索引页的叶子节点中存放完整的数据记录，辅助索引页的叶子节点中存放指向聚簇索引页叶子节点的书签（bookmark），也可以称为路标。\n主要是两部分：\n page layout scan rec with cursor, and then insert, update, delete  1. 页 #  页是InnoDB存储引擎的最小存储单位。页的大小可以设置为4K、8K、16K、32K、64K，默认为16K，页的大小设置要考虑IO性能，也会影响到区的分配大小和重做日志缓冲的大小，详见innodb_page_size。\n"},{"id":5,"href":"/docs/MySQL/InnoDB/","title":"Inno Db","section":"MySQL","content":"InnoDB存储引擎 #  从InnoDB的发展历史作为起点，了解InnoDB一路走来的历程。\n然后在全局视角下先了解整体的模块构成及其功能。\n再按照以下的路径深入细节：\n 概览 源码结构 基本数据结构与算法 os records 索引页 storage management 同步机制 缓冲池 数据字典 B+树索引 change buffer lock 事务处理 mini-transaction redo log 服务管理 row  一路下来，应该已经对各个模块的功能和细节了然于心，然后再回头再重温一下整体架构，做到融会贯通。\n"},{"id":6,"href":"/docs/MySQL/Server/connection_handler/","title":"Connection Handler","section":"Server","content":"概述 #  在MySQL中，对于client发来的请求，其处理流程分为建链和请求处理两部分，这两个阶段分别称为connection phase和command phase。\nMySQL的server-client protocol交互如下：\n从上图中可以看出，connection phase负责连接的建立，而日常的query处理，则称为command phase，command phase的结束，以COM_QUIT query的到来作为标志。\n一般典型的交互过程是connect，query，query，query\u0026hellip; quit，其中query可以是dml、ddl、multi-statement或是prepared statement。\n下面我们先看一下connection phase。\n建链 #  connection phase用于在client-server间建立连接，而建链分为TCP建链和应用建链。\nTCP建链是指TCP socket的listen、accept。\n应用建链是在TCP建链的基础上，通过应用层协议进行认证：server发送handshake（initial handshake）、客户端回username/pwd（handshake response），server回应是否通过认证（OK/Error）。\n我们接下来首先看一下connection phase，即在MySQL中如何处理TCP建链和应用建链的。\nTCP建链 #  TCP连接处理分为两步：\n 初始化，创建conn_mgr和conn_handler，acceptor和listener 监听建链，由acceptor+listener负责 对已建链连接进行线程分发处理，由conn_mgr+conn_handler负责  整体流程如下图所示：\n代码实现\nmysqld_main init_common_variables Connection_handler_manager::init() // 初始化conn_mgr和conn_handler  network_init()\t// 初始化网络 \tset_ports();\t// 设置port  // 初始化acceptor、listener \tMysqld_socket_listener *mysqld_socket_listener= new (std::nothrow) Mysqld_socket_listener(bind_addr_str, mysqld_port, back_log, mysqld_port_timeout, unix_sock_name); Connection_acceptor\u0026lt;Mysqld_socket_listener\u0026gt; *mysqld_socket_acceptor= new (std::nothrow) Connection_acceptor\u0026lt;Mysqld_socket_listener\u0026gt;(mysqld_socket_listener); mysqld_socket_acceptor-\u0026gt;init_connection_acceptor(); ... mysqld_socket_acceptor-\u0026gt;connection_event_loop();\t// 监听、接受、处理连接 监听建链 #  MySQL的连接方式支持多种方式，常见的有：socket、TCP/IP、named_pipe和shared_memory。因为我们一般都在Unix-like系统上编程，所以这里只展开讨论socket，其余连接方式的处理类似。\n连接处理分为分为监听（listen）和接受（accept）两部分：\n listener：Mysqld_socket_listener acceptor：Connection_acceptor  我们先看一下listener\nlistener #  Mysqld_socket_listener用于处理监听（listen）和建链（accept），包括：\n 监听信息 ：ip、port、backlog、socket、socket_map 处理 ：POLL（tcp socket、unix sock file） 状态信息 ：错误（select、accept、tcpwrap产生的状态）  Mysqld_socket_listener\n   方法 说明     ctor/dtor /   setup_listener 建链准备（初始化listen socket，POLL、socket_map）   listen_for_connection_event 建链处理（处理poll/select，accept，创建channel_info）   close_listener 关闭连接（socket_shutdown、socket_close、unlink_socket_file）    acceptor #  Connection_acceptor是一个模板类，根据type展开不同的listener（Mysqld_socket_listener、Named_pipe_listener、Shared_mem_listener），负责将listener TCP监听、建链的连接（channel_info）交给conn_mgr处理。\n核心函数如下：\n/** Connection acceptor loop to accept connections from clients. */ void connection_event_loop() { Connection_handler_manager *mgr= Connection_handler_manager::get_instance(); while (!abort_loop) { Channel_info *channel_info= m_listener-\u0026gt;listen_for_connection_event(); if (channel_info != NULL) mgr-\u0026gt;process_new_connection(channel_info); } } Connection_acceptor\n   方法 说明     ctor/dtor 传入listener   init_connection_acceptor 调用listener-\u0026gt;setup_listener()   connection_event_loop 调用listener监听建链，然后交给conn_mgr处理连接   close_listener 调用listener-\u0026gt;close_listener    LibWrap #  TCP Wrappers作为服务程序安全增强工具，提供 IP 层存取过滤控制，扩展了 inetd (xinetd ) 对服务程序的控制能力，其作用相当于给 xinetd 增加了一道防火墙。最常用的场景如下：通过配置/etc/hosts.allow和/etc/hosts.deny ，以允许或阻止指定客户端对指定服务的访问。\n处理连接 #  经过上面的处理后，用户的建链请求已经经过listen+accept，下面交给conn_mgr+conn_handler。\n在MySQL中，为了支持多种的连接处理方式（单线程only-once、多线程1:1、线程池m:n），通过Connection_handler基类来定义连接处理所需要的函数，具体的处理方式则由子类实现。\nconn_mgr和conn_handler的关系：\nconnection manager #  conn_mgr采用单例模式，进行全局的连接资源管理，这些资源包括：\n conn_handler的创建 将lisenter创建的连接（channel_info）转交给conn_handler 连接相关计数：当前、历史、中止、错误 提供callback接口用于在相关连接线程等待时进行回调  Connection_handler_manager\n   方法 说明     ctor/dtor 由init调用   init 根据thread_handler的配置，实例化conn_handler,调用conn_mgr ctor实例化conn_mgr，注册callbacks   destroy_instance 销毁conn_handler和conn_mgr   get_instance 返回conn_mgr instance   process_new_connection 移交连接   wait_till_no_connection 关闭MySQL时等待连接清零   load_connection_handlerunload_connection_handler 为企业版线程池（plugin）准备的钩子    这里的核心函数为process_new_connection。需要注意一点：channel_info连接信息的所有权转移，由listener转移给conn_handler。\nvoid Connection_handler_manager::process_new_connection(Channel_info* channel_info) { // 连接控制  if (abort_loop || !check_and_incr_conn_count()) { channel_info-\u0026gt;send_error_and_close_channel(ER_CON_COUNT_ERROR, 0, true); delete channel_info; return; } // 转交连接  if (m_connection_handler-\u0026gt;add_connection(channel_info)) { inc_aborted_connects(); delete channel_info; } } conn_mgr的生命周期：初始化和销毁的时机分别为MySQL启动和停止，代码如下：\n// 初始化 mysqld_main init_embedded_erver init_common_variables get_options Connection_handler_manager::init() // 停止 lib_sql.cc end_embedded_server unireg_clear cleanup Connection_handler_manager::destroy_instance(); mysqld.cc mysqld.cc mysqld_main unireg_abort clean_up Connection_handler_manager::destroy_instance(); connection handler #  Connection_handler\n   方法 说明     ctor/dtor /   add_connection 处理连接   get_max_threads 获取conn_handler可以创建的最大线程数    从上面的conn_handler类图可以看到，Connection_handler一共有三个子类，这里主要看Per_thread_connection_handler。\nPer_thread_connection_handler的功能是新起一个线程（handle_connection）1:1处理连接，即进行应用协议的处理。\n请求处理 #  请求分发 #  MySQL请求处理的详细过程如下：\n// 监听socket事件  mysqld_socket_acceptor-\u0026gt;connection_event_loop() { Connection_handler_manager *mgr= Connection_handler_manager::get_instance(); while (!abort_loop) { Channel_info *channel_info= m_listener-\u0026gt;listen_for_connection_event(); if (channel_info != NULL) mgr-\u0026gt;process_new_connection(channel_info); } } Channel_info* Mysqld_socket_listener::listen_for_connection_event() { int retval= poll(\u0026amp;m_poll_info.m_fds[0], m_socket_map.size(), -1); // POLL  int retval= select((int) m_select_info.m_max_used_connection, \u0026amp;m_select_info.m_read_fds, 0, 0, 0); // 或者SELECT  for (uint i= 0; i \u0026lt; m_socket_map.size(); ++i) { if (m_poll_info.m_fds[i].revents \u0026amp; POLLIN) { listen_sock= m_poll_info.m_pfs_fds[i]; is_unix_socket= m_socket_map[listen_sock]; break; } } MYSQL_SOCKET connect_sock; connect_socket= mysql_socket_accept(key_socket_client_connection, listen_sock, (struct sockaddr *)(\u0026amp;cAddr), \u0026amp;length); Channel_info* channel_info= new (std::nothrow) Channel_info_tcpip_socket(connect_sock); return channel_info; } void Connection_handler_manager::process_new_connection(Channel_info* channel_info) { check_and_incr_conn_count(); // 检查max_connections  m_connection_handler-\u0026gt;add_connection(channel_info); } // One_thread_connection_handler 一个线程处理所有连接  // Per_thread_connection_handler 一个线程处理一个连接  bool Per_thread_connection_handler::add_connection(Channel_info* channel_info) { // 检查thread cache是否有空闲  check_idle_thread_and_enqueue_connection(channel_info); // 没有空闲，创建用户线程  mysql_thread_create(key_thread_one_connection, \u0026amp;id, \u0026amp;connection_attrib, handle_connection, (void*) channel_info); } extern \u0026#34;C\u0026#34; void *handle_connection(void *arg) { my_thread_init(); // 线程初始化  for (;;) { THD *thd= init_new_thd(channel_info); // 初始化THD对象  thd_manager-\u0026gt;add_thd(thd); if (thd_prepare_connection(thd)) { // connection phase  lex_start(thd); // 初始化sqlparser  rc= login_connection(thd); check_connection(thd); acl_authenticate(thd, COM_CONNECT); // auth认证  thd-\u0026gt;send_statement_status(); prepare_new_connection_state(thd); // 准备接受QUERY  } else {\t// command phase  while (thd_connection_alive(thd)) // 判活  { if (do_command(thd)) // 处理query sql/sql_parser.c  break; } end_connection(thd); } close_connection(thd, 0, false, false); thd-\u0026gt;release_resources(); // 进入thread cache，等待新连接复用  channel_info= Per_thread_connection_handler::block_until_new_connection(); } my_thread_end(); my_thread_exit(0); } command phase #  具体SQL处理流程：\nbool do_command(THD *thd) { // 新建连接，或者连接没有请求时，会block在这里等待网络读包  NET *net= thd-\u0026gt;get_protocol_classic()-\u0026gt;get_net(); my_net_set_read_timeout(net, thd-\u0026gt;variables.net_wait_timeout); net_new_transaction(net); rc= thd-\u0026gt;get_protocol()-\u0026gt;get_command(\u0026amp;com_data, \u0026amp;command); dispatch_command(thd, \u0026amp;com_data, command); } int Protocol_classic::get_command(COM_DATA *com_data, enum_server_command *cmd) { read_packet(); // 网络读包  my_net_read(\u0026amp;m_thd-\u0026gt;net); raw_packet= m_thd-\u0026gt;net.read_pos; *cmd= (enum enum_server_command) raw_packet[0]; // 获取命令号  parse_packet(com_data, *cmd); } bool dispatch_command(THD *thd, const COM_DATA *com_data, enum enum_server_command command) { switch (command) { case COM_QUERY: alloc_query(thd, com_data-\u0026gt;com_query.query, com_data-\u0026gt;com_query.length); // 从网络读Query并存入thd-\u0026gt;query  mysql_parse(thd, \u0026amp;parser_state); // 解析  } } // sql/sql_parse.cc void mysql_parse(THD *thd, Parser_state *parser_state) { mysql_reset_thd_for_next_command(thd); lex_start(thd); parse_sql(thd, parser_state, NULL); // 解析SQL语句  mysql_execute_command(thd, true); // 执行SQL语句  LEX *const lex= thd-\u0026gt;lex; TABLE_LIST *all_tables= lex-\u0026gt;query_tables; trans_commit_implicit(thd); // 隐式提交 sql/transaction.cc  switch (lex-\u0026gt;sql_command) { case SQLCOM_INSERT: { res= lex-\u0026gt;m_sql_cmd-\u0026gt;execute(thd); break; } case SQLCOM_DELETE: { res= lex-\u0026gt;m_sql_cmd-\u0026gt;execute(thd); break; } case SQLCOM_UPDATE: { res= lex-\u0026gt;m_sql_cmd-\u0026gt;execute(thd); break; } case SQLCOM_SELECT: { res= select_precheck(thd, lex, all_tables, first_table); // 检查privileges  res= execute_sqlcom_select(thd, all_tables); } case SQLCOM_COMMIT: // 显式提交  { trans_commit(thd); ha_commit_trans(thd, TRUE); Transaction_ctx *trn_ctx= thd-\u0026gt;get_transaction(); tc_log-\u0026gt;commit(thd, all)); // MYSQL_BIN_LOG::commit sql/binlog.cc  ordered_commit(thd, all, skip_commit); } ... } } 网络模型 #  MySQL对于网络处理模型做了非常好的抽象分层。\n网络处理模型 #  MySQL对于网络通信的封装层次如下：\n| Channel_info\t连接 | THD\t线程 | Protocol\t应用协议 | NET\t网络缓冲 | VIO\t网络I/O | SOCKET\tsocket fd Channel_info封装了连接信息。\nTHD封装了线程相关的数据结构。\nProtocol封装了应用协议，一共有5种，其中2种最常用，统称为classic protocol：\n PROTOCOL_TEXT：用于plain SQL PROTOCOL_BINARY：用于prepared statement，也称为prepared statement protocol。  NET封装了网络缓冲区，包括buffer、packet、read/write点位。\nVIO封装了网络I/O，包括sockaddr等待。\nSOCKET封装了socket fd，里面只有fd信息。\n这些对象的创建时机如下：\n创建对象的函数调用链如下：\nmysqld_socket_acceptor-\u0026gt;connection_event_loop() Mysqld_socket_listener::listen_for_connection_event() mysql_socket_accept new Channel_info_tcpip_socket // accept \u0026amp; 封装 Channel_Info  Connection_handler_manager::process_new_connection() Per_thread_connection_handler::add_connection // 交给具体的conn_handler处理连接  create pthread(handle_connection) for loop init_new_thd // 初始化VIO, THD, Protocol和VIO  channel_info-\u0026gt;create_thd() delete channel_info thd_manager-\u0026gt;add_thd // 加thd  thd_prepare_connection // connection phase  login_connection while thd_connection_alive // command phase  do_command dispatch_command create_thd() create_and_init_vio mysql_socket_vio_new // malloc，初始化VIO  VIO malloc vio_init THD malloc // malloc，初始化THD，Protocol  thd-\u0026gt;get_protocol_classic()-\u0026gt;init_net // 初始化NET  my_net_init my_net_local_init // 设置net_read_timeout, net_write_timeout 从上面我们可以看出，TCP建链后主线程只封装了Channel_nfo用于存放连接的信息，后续的THD、NET、VIO等信息的创建和初始化都（connections and disconnects）是在用户线程完成的。通过这种方式，主线程可以更高效的accept新的连接请求，从而优化在短连接场景下的性能。\n参见Improving connect/disconnect performance和WL#6606: Offload THD initialization and network initialization to worker thread。\n短连接的性能优化效果如下：\n我们先看一下Channel_info。\nChannel_info 连接 #  Channel_info对象封装了连接信息，以区分处理不同的连接方式：local、TCP/IP、named pipes和shared memory，并负责整个网络模型层次中各个对象的初始化。类和类关系图如下：\nChannel_info_local_socket\nChannel_info_shared_mem\nChannel_info_named_pipe\nChannel_info_tcpip_socket\n属性\n   属性 说明     prior_thr_create_utime 连接的创建时间    方法\n   方法 说明     ctor/dtor /   create_thd 创建THD   create_and_init_vio 创建并初始化VIO（只针对local、TCP/IP）   send_error_and_close_channel 发送错误包并关闭socket   prior_thr_create_utime getter/setter Per_thread_connection_handler::add_connection时设置    THD 线程 #  THD\nProtocol 应用协议 #  Protocol\nNET 网络缓冲 #  NET\nVIO 网络 #  VIO\nSOCKET socket fd #  SOCKET最简单，直接代码说话。\n/** An instrumented socket. */ struct st_mysql_socket { /** The real socket descriptor. */ my_socket fd; /** The instrumentation hook. Note that this hook is not conditionally defined, for binary compatibility of the @c MYSQL_SOCKET interface. */ struct PSI_socket *m_psi; }; /** An instrumented socket. @c MYSQL_SOCKET is a replacement for @c my_socket. */ typedef struct st_mysql_socket MYSQL_SOCKET; thread cache #  pthread复用可以通过thread_cache_size配置：默认值为8 + (max_connections / 100)。\nMySQL提供如下status可以查看thread的数量信息：\n Threads_cached：缓存的 thread数量 Threads_connected：已连接的thread数量 Threads_created：建立的thread数量 Threads_running：running状态的 thread 数量  Threads_created = Threads_cached + Threads_connected\nThreads_running \u0026lt;= Threads_connected\n创建pthread新连接非常消耗资源，特别是在短连接频繁场景下，如果又没有其他组件实现连接池，通过观察Connections/Threads_created的比例，适当提高 thread_cache_size，可以降低新建连接的开销。\nmysql\u0026gt; show status like 'Thread%'; +-------------------+-------+ | Variable_name | Value | +-------------------+-------+ | Threads_cached | 1 | | Threads_connected | 1 | | Threads_created | 2 | | Threads_running | 1 | +-------------------+-------+ 4 rows in set (0.00 sec) auth连接限制 #  除了参数 max_user_connections 限制每个用户的最大连接数，还可以对每个用户制定更细致的限制。以下四个限制保存在mysql.user表中：\n MAX_QUERIES_PER_HOUR 每小时最大请求数（语句数量） MAX_UPDATES_PER_HOUR 每小时最大更新数（更新语句的数量） MAX_CONNECTIONS_PER_HOUR 每小时最大连接数 MAX_USER_CONNECTIONS 这个用户的最大连接数  GRANT priv_type [(column_list)] [, priv_type [(column_list)]] ... ON [object_type] priv_level TO user [auth_option] [, user [auth_option]] ... [REQUIRE {NONE | tls_option [[AND] tls_option] ...}] [WITH {GRANT OPTION | resource_option} ...] resource_option: { | MAX_QUERIES_PER_HOUR count | MAX_UPDATES_PER_HOUR count | MAX_CONNECTIONS_PER_HOUR count | MAX_USER_CONNECTIONS count } ALTER USER 'jeffrey'@'localhost' WITH MAX_QUERIES_PER_HOUR 90; 源码分析 #  typedef struct user_resources { uint questions; /* MAX_QUERIES_PER_HOUR */ uint updates; /* MAX_UPDATES_PER_HOUR */ uint conn_per_hour; /* MAX_CONNECTIONS_PER_HOUR */ uint user_conn; /* MAX_USER_CONNECTIONS */ /* Values of this enum and specified_limits member are used by the parser to store which user limits were specified in GRANT statement. */ enum {QUERIES_PER_HOUR= 1, UPDATES_PER_HOUR= 2, CONNECTIONS_PER_HOUR= 4, USER_CONNECTIONS= 8}; uint specified_limits; } USER_RESOURCES; ACL_USER #  ACL_USER 是保存用户认证相关信息的类 USER_RESOURCES 是它的成员属性\nclass ACL_USER :public ACL_ACCESS { public: USER_RESOURCES user_resource; ... } ACl_USER 对象保存在数组 acl_users 中，每次mysqld启动时，从mysql.user表中读取数据，初始化 acl_users，初始化过程在函数 acl_load 中\n调用栈如下：\nmain() mysqld_main() acl_init(opt_noacl); acl_reload(thd); acl_load(thd, tables); USER_CONN #  保存用户资源使用的结构体，建立连接时，调用 get_or_create_user_conn 为 THD 绑定 USER_CONN 对象：\n// 请求第一次处理时 acl_authenticate() if ((acl_user-\u0026gt;user_resource.questions || acl_user-\u0026gt;user_resource.updates || acl_user-\u0026gt;user_resource.conn_per_hour || acl_user-\u0026gt;user_resource.user_conn || global_system_variables.max_user_connections) \u0026amp;\u0026amp; get_or_create_user_conn(thd, (opt_old_style_user_limits ? sctx-\u0026gt;user().str : sctx-\u0026gt;priv_user().str), (opt_old_style_user_limits ? sctx-\u0026gt;host_or_ip().str : sctx-\u0026gt;priv_host().str), \u0026amp;acl_user-\u0026gt;user_resource)) -------\u0026gt; thd-\u0026gt;set_user_connect(uc); 每个用户第一个连接创建时，建立一个新对象，存入 hash_user_connections。\n第二个连接开始，从 hash_user_connections 取出 USER_CONN 对象和 THD 绑定。\n同一个用户的连接，THD 都和同一个 USER_CONN 对象绑定。\ntypedef struct user_conn { /* hash_user_connections hash key: user+host key */ char *user; char *host; /* Total length of the key. */ size_t len; ulonglong reset_utime; uint connections; uint conn_per_hour, updates, questions; USER_RESOURCES user_resources; } USER_CONN; 资源限制在源码中的位置\n   资源名称 函数     MAX_USER_CONNECTIONS check_for_max_user_connections()   MAX_CONNECTIONS_PER_HOUR check_for_max_user_connections()   MAX_QUERIES_PER_HOUR check_mqh()   MAX_UPDATES_PER_HOUR check_mqh()    调用链\nhandle_connection thd_prepare_connection(thd) login_connection check_connection acl_authenticate check_for_max_user_connections do_command dispatch_command mysql_parse check_mqh 权限存储与管理 #  MySQL用户权限信息都存储在以下系统表中，用户权限的创建、修改和回收都会同步更新到系统表中。\n   系统表 存储的权限信息     mysql.user 用户权限   mysql.db 库权限   mysql.tables_priv 表权限   mysql.columns_priv 列权限   mysql.procs_priv 存储过程和UDF的权限信息   mysql.proxies_priv proxy权限    mysql.db存储是库的权限信息，并不存储实例有哪些库（ls查找目录）。  information_schema表的查询接口：\n USER_PRIVILEGES SCHEMA_PRIVILEGES TABLE_PRIVILEGES COLUMN_PRIVILEGES  权限缓存 #  用户在连接数据库的过程中，为了加快权限的验证过程，系统表中的权限会缓存到内存中。\n mysql.user → acl_users mysql.db → acl_dbs mysql.tables_priv和mysql.columns_priv → column_priv_hash mysql.procs_priv → proc_priv_hash和func_priv_hash  另外acl_cache缓存db级别的权限信息。例如执行use db时，会尝试从acl_cache中查找并更新当前数据库权限（thd-\u0026gt;security_ct→db_access）。\n权限更新 #  以grant select on test.t1为例:\n 更新系统表mysql.user，mysql.db，mysql.tables_priv 更新缓存acl_users，acl_dbs，column_priv_hash 清空acl_cache  flush privileges #  重新从系统表中加载权限信息来构建缓存。\nMariaDB Role体系 #  从MairaDB 10.0.5开始，MariaDB开始提供Role（角色）的功能，补全了大家一直吐槽的MySQL不能像 Oracle 一样支持角色定义的功能。\n一个角色就是把一堆的权限捆绑在一起授权，这个功能对于有很多用户拥有相同权限的情况可以显著提高管理效率。在有角色之前，这种情况只能为每个用户都做一大堆的授权操作，或者是给很多个需要相同权限的用户提供同一个账号去使用，这又会导致你要分析用户行为的时候不知道哪个操作是哪个具体用户发起的。\n有了角色，这样的管理就太容易了。例如，可以把权限需求相同的用户赋予同一个角色，只要定义好这个角色的权限就行，要更改这类用户的权限，只需要更改这个角色的权限就可以了，变化会影响到所有这个角色的用户。\n使用方法 #  创建角色需要使用CREATE ROLE语句，删除角色使用DROP ROLE语句。然后再通过GRANT语句给角色增加授权，也可以把角色授权给用户，然后这个角色的权限就会分配给这个用户。同样，REVOKE语句也可以用来移除角色的授权，或者把一个用户移除某个角色。\n一旦用户连接上来，他可以执行SET ROLE语句来把自己切换到某个被授权的角色下，从而使用这个角色的权限。通过CURRENT_ROLE函数可以显示当前用户执行在哪个角色下，没有就是NULL。\n只有直接被授予用户的角色才可以使用SET ROLE语句，间接授予的角色并不能被SET ROLE设置。例如角色B被授予角色A，而角色A被授予用户A，那么用户A只能 SET ROLE 角色A，而不能设置角色B。（角色B-\u0026gt;角色A-\u0026gt;用户A）\n从MariaDB 10.1.1开始，可以利用SET DEFAULT ROLE语句来给某个用户设置默认的角色。当用户链接的时候，会默认使用这个角色，其实就是连接后自动做了一个SET ROLE语句。\n创建一个角色并给他赋权:\nCREATE ROLE journalist; GRANT SHOW DATABASES ON *.* TO journalist; GRANT journalist to hulda; 这里hulda并不马上拥有SHOW DATABASES权限，他还需要先执行一个SET ROLE语句启用这个角色：\n// 一开始只能看到IS库 SHOW DATABASES; +--------------------+ | Database | +--------------------+ | information_schema | +--------------------+ // 当前用户没有对应的角色 SELECT CURRENT_ROLE; +--------------+ | CURRENT_ROLE | +--------------+ | NULL | +--------------+ // 启用角色 SET ROLE journalist; SELECT CURRENT_ROLE; +--------------+ | CURRENT_ROLE | +--------------+ | journalist | +--------------+ SHOW DATABASES; +--------------------+ | Database | +--------------------+ | ... | | information_schema | | mysql | | performance_schema | | test | | ... | +--------------------+. SET ROLE NONE; 角色也可以授权给另一个角色（角色累加）：\nCREATE ROLE writer; GRANT SELECT ON db1.* TO writer; GRANT writer TO journalist; 但是只能SET ROLE直接给用户的角色。像这里hulda只能SET ROLE journalist，而不能SET ROLE writer，并且只要启用了journalist角色，hulda也自动获得了writer角色的权限：\nSELECT CURRENT_ROLE; +--------------+ | CURRENT_ROLE | +--------------+ | NULL | +--------------+ SHOW TABLES FROM data; Empty set (0.01 sec) // 启用角色 SET ROLE journalist; SELECT CURRENT_ROLE; +--------------+ | CURRENT_ROLE | +--------------+ | journalist | +--------------+ // 叠加了wirter角色，可以访问db1中的表 SHOW TABLES FROM db1; +------------------------------+ | Tables_in_db1 | +------------------------------+ | set1 | | ... | +------------------------------+ 限制 #  角色和视图、存储过程\n当用户设置启用了一个角色，从某种意义上说他有两个身份的权限集合（用户本身和他的角色）但是一个视图或者存储过程只能有一个定义者。所以，当一个视图或者存储过程通过SQL SECURITY DEFINER创建时，只能指定CURRENT_USER或者CURRENT_ROLE中的一个。所以有些情况下，你创建了一个视图，但是你却可能没法使用它。\nCREATE ROLE r1; GRANT ALL ON db1.* TO r1; GRANT r1 TO foo@localhost; GRANT ALL ON db.* TO foo@localhost; SELECT CURRENT_USER; +---------------+ | current_user | +---------------+ | foo@localhost | +---------------+ SET ROLE r1; CREATE TABLE db1.t1 (i int); CREATE VIEW db.v1 AS SELECT * FROM db1.t1; SHOW CREATE VIEW db.v1; +------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+ | View | Create View | character_set_client | collation_connection | +------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+ | v1 | CREATE ALGORITHM=UNDEFINED DEFINER=`foo`@`localhost` SQL SECURITY DEFINER VIEW `db`.`v1` AS SELECT `db1`.`t1`.`i` AS `i` from `db1`.`t1` | utf8 | utf8_general_ci | +------+------------------------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+ CREATE DEFINER=CURRENT_ROLE VIEW db.v2 AS SELECT * FROM db1.t1; SHOW CREATE VIEW db.b2; +------+-----------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+ | View | Create View | character_set_client | collation_connection | +------+-----------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+ | v2 | CREATE ALGORITHM=UNDEFINED DEFINER=`r1` SQL SECURITY DEFINER VIEW `db`.`v2` AS select `db1`.`t1`.`a` AS `a` from `db1`.`t1` | utf8 | utf8_general_ci | +------+-----------------------------------------------------------------------------------------------------------------------------+----------------------+----------------------+ 相关文件 #  源代码文件按照文章顺序整理：\n源代码文件按照文章顺序整理： sql/conn_handler/named_pipe_connection.h\tNamed_pipe_listener sql/conn_handler/named_pipe_connection.cc\tChannel_info_named_pipe sql/conn_handler/shared_memory_connection.h\tShared_mem_listener sql/conn_handler/shared_memory_connection.cc\tChannel_info_shared_mem sql/conn_handler/socket_connection.h\tMysqld_socket_listener sql/conn_handler/socket_connection.cc\tChannel_info_local_socket Channel_info_tcpip_socket TCP_socket Unix_socket sql/conn_handler/channel_info.h\tChannel_info sql/conn_handler/channel_info.cc sql/conn_handler/connection_acceptor.h\tConnection_acceptor sql/conn_handler/connection_handler_manager.h\tConnection_handler_manager sql/conn_handler/connection_handler_manager.cc sql/conn_handler/connection_handler.h\tConnection_handler sql/conn_handler/connection_handler_impl.h\tPer_thread_connection_handler One_thread_connection_handler sql/conn_handler/plugin_connection_handler.h\tPlugin_connection_handler sql/conn_handler/connection_handler_one_thread.cc sql/conn_handler/connection_handler_per_thread.cc "},{"id":7,"href":"/docs/MySQL/Server/net/","title":"Net","section":"Server","content":"MySQL packet的结构如下：\npacket length (3 bytes) // 数据\npacket number (1 byte) // 保序\ncompression length (3 bytes) optional // 压缩\ncompression packet number （1 byte） optional // 保序\npacket data\n 因为采用3个字节存储包的长度，所以支持的包最大为 MAX_PACKET_LENGTH (256L256L256L-1)。如果数据流超过包最大值（16M），则通过packet number（ne→pkt_nr）保序。\n发包 #  my_net_write #  发包，Write a logical packet with packet header.\nnet_write_buff #  发送缓冲区，Caching the data in a local buffer before sending it.\n每个Net对象有一个buffer(net-\u0026gt;buff)，即将发送的数据被拷贝到这个buffer中。如果buffer未满则进行memcpy，并更新写入点位（net-\u0026gt;write_pos）；满了当Buffer满时需要立刻发出到客户端（net_write_packet）。\nnet_write_packet #  socket写数据，Write a MySQL protocol packet to the network handler.\nnet_write_raw_loop #  Write a determined number of bytes to a network handler. 调用vio_write进行socket写\nnet_flush #  Flush write_buffer if not empty. 也是调用net_write_packet进行socket写数据\n收包 #  my_net_read #  收包\nnet_read_packet #  读单包，Read one (variable-length) MySQL protocol packet. A MySQL packet consists of a header and a payload.\nnet_read_packet_header #  读包头，Read the header of a packet. 校验包头中的packet number，确认保序\n"},{"id":8,"href":"/docs/MySQL/Server/protocol/","title":"Protocol","section":"Server","content":"MySQL client-server protocol：https://dev.mysql.com/doc/internals/en/client-server-protocol.html\nMySQL 5.7重构了Protocol模块\n我们在这里主要聚焦在command phase，即MySQL server和client如何处理query的交互。\n我们从MySQL协议可以知道，在query的交互上，一般采用ping-pong模型，即：\n client-\u0026gt;server：发query server-\u0026gt;client：回包  所以我们在下面详细拆解这两个阶段。\n读取query #  当client发送一条query后，server对query进行以下处理：\n 读包 解析包体 根据命令指派执行  数据报文包括包头+包体，包头已在读包内部验证后丢弃（read_packet），然后包体返回给Protocol_classic::get_command封装为raw_packet。从raw_packet[0]中判断query的命令号，进行报文解析（parse_packet），拆解为COM_DATA（根据命令号封装了不同的struct）。\ndo_command // conn_handler Protocol_classic::get_command // 读包 Protocol_classic::read_packet my_net_read // 处理多包、压缩包 net_read_packet // 将读到的数据填充到NET中 Protocol_classic::parse_packet // 解析包体 dispatch_command // 根据命令指派执行 回包 #  返回的报文类型有：OK Packet，Error Packet和结果集包（Data Packet，EOF Packet）。\nOK Packet #  do_command dispatch_command THD::send_statement_status // 根据这条statement执行的情况确定回包类型 Protocol_classic::send_ok // 回OK包 Error Packet #  do_command dispatch_command THD::send_statement_status // 根据这条statement执行的情况确定回包类型 Protocol_classic::send_error // 回错误包 结果集包 #  结果集包的结构如下:\n   数据 说明     ResultSet Header 列数量   Field 列（多个）   EOF    Row 行（多个）   EOF     Server层的SQL执行器拼装结果集：\n// sql_executor Query_result_send::send_result_set_metadata thd-\u0026gt;send_result_metadata Protocol_classic::start_result_metadata() // 列数量  Protocol_classic::send_field_metadata() // 列（多个）  Protocol_classic::end_result_metadata() // EOF Query_result_send::send_data(List\u0026lt;Item\u0026gt; \u0026amp;items) // 行（多个）  protocol-\u0026gt;start_row(); thd-\u0026gt;send_result_set_row(\u0026amp;items) for loop : items protocl-\u0026gt;store() thd-\u0026gt;inc_sent_row_count(1); protocol-\u0026gt;end_row() Query_result_send::send_eof // EOF  net_send_ok 注意最后两行：send_eof调用了send_ok？？？\nbool Protocol_classic::send_eof(uint server_status, uint statement_warn_count) { DBUG_ENTER(\u0026#34;Protocol_classic::send_eof\u0026#34;); bool retval; /* Normally end of statement reply is signaled by OK packet, but in case of binlog dump request an EOF packet is sent instead. Also, old clients expect EOF packet instead of OK */ #ifndef EMBEDDED_LIBRARY  if (has_client_capability(CLIENT_DEPRECATE_EOF) \u0026amp;\u0026amp; (m_thd-\u0026gt;get_command() != COM_BINLOG_DUMP \u0026amp;\u0026amp; m_thd-\u0026gt;get_command() != COM_BINLOG_DUMP_GTID)) retval= net_send_ok(m_thd, server_status, statement_warn_count, 0, 0, NULL, true); else #endif  retval= net_send_eof(m_thd, server_status, statement_warn_count); DBUG_RETURN(retval); } 这是因为在MySQL 5.7.5中，有一个worklog：WL#7766: Deprecate the EOF packet，认为EOF and OK packets serve the same purpose (to mark the end of a query execution result.\n将ok和eof报文的发送放在了同一块逻辑中，client/server支持一个flag：CLIENT_DEPRECATE_EOF，EOF包说明里也有提到。\n如果我们要自己组装结果集包，则按照如下API组装即可：\nthd-\u0026gt;send_result_metadata protocol-\u0026gt;start_row(); protocol-\u0026gt;store(); protocol-\u0026gt;end_row(); my_eof(thd); 下面是一个实际的组装示例：\nmysql\u0026gt; show sql_filters; +--------+---------+----------+----------+---------+-------------+ | type | item_id | cur_conc | max_conc | key_num | key_str | +--------+---------+----------+----------+---------+-------------+ | SELECT | 4 | 0 | 1 | 2 | +,1,a=1~a=2 | +--------+---------+----------+----------+---------+-------------+ void mysqld_list_sql_filters(THD *thd) { List\u0026lt;Item\u0026gt; field_list; field_list.push_back(new Item_empty_string(\u0026#34;type\u0026#34;, 21)); field_list.push_back(new Item_return_int(\u0026#34;item_id\u0026#34;, 21, MYSQL_TYPE_LONGLONG)); field_list.push_back(new Item_return_int(\u0026#34;cur_conc\u0026#34;, 21, MYSQL_TYPE_LONGLONG)); field_list.push_back(new Item_return_int(\u0026#34;max_conc\u0026#34;, 21, MYSQL_TYPE_LONGLONG)); field_list.push_back(new Item_return_int(\u0026#34;key_num\u0026#34;, 21, MYSQL_TYPE_LONGLONG)); field_list.push_back(new Item_empty_string(\u0026#34;key_str\u0026#34;, SQL_FILTER_STR_LEN)); if (thd-\u0026gt;send_result_metadata(\u0026amp;field_list, Protocol::SEND_NUM_ROWS | Protocol::SEND_EOF)) return; mysql_rwlock_rdlock(\u0026amp;LOCK_filter_list); if (list_one_sql_filter(thd, select_filter_list, \u0026#34;SELECT\u0026#34;) || list_one_sql_filter(thd, update_filter_list, \u0026#34;UPDATE\u0026#34;) || list_one_sql_filter(thd, delete_filter_list, \u0026#34;DELETE\u0026#34;)) { ; } mysql_rwlock_unlock(\u0026amp;LOCK_filter_list); my_eof(thd); } int list_one_sql_filter(THD *thd, LIST *filter_list, const char *type) { CHARSET_INFO *cs= system_charset_info; filter_item *item= NULL; Protocol *protocol= thd-\u0026gt;get_protocol(); while (filter_list) { protocol-\u0026gt;start_row(); item= (filter_item*)filter_list-\u0026gt;data; protocol-\u0026gt;store(type, cs); protocol-\u0026gt;store((longlong)item-\u0026gt;id); protocol-\u0026gt;store(__sync_fetch_and_add(\u0026amp;(item-\u0026gt;cur_conc), 0)); protocol-\u0026gt;store(item-\u0026gt;max_conc); protocol-\u0026gt;store((longlong)item-\u0026gt;key_num); protocol-\u0026gt;store(item-\u0026gt;orig_str, cs); if (protocol-\u0026gt;end_row()) return 1; //no cover line  filter_list= filter_list-\u0026gt;next; } return 0; } MySQL 5.7的协议重构 #  MySQL 5.7大幅重构了Protocol模块代码, 采用了OO的设计方式：WL#7126: Refactoring of protocol class：\nNew Protocol ``class` `hierarchy ============================ The ``new` `hierarchy consists of 4 classes: Protocol | Protocol_classic | |---Protocol_text |---Protocol_binary Protocol is an abstract ``class` `that defines the ``new` `API. Protocol_classic is ex-Protocol ``class``, implements core of both classic protocols - text and binary. Protocol_text and Protocol_binary are implementations of appropriate classic protocols.   Protocol作为一个注释丰满且只有纯虚函数的抽象类, 非常容易理顺protocol模块能够提供的API。细节实现主要在Protocol_classic中（所以上文的调用栈可以看到, 实际逻辑是走到Protocol_classic中的）, 而逻辑上还划分出的两个类:\n Protocol_binary是Prepared Statements使用的协议 Protocol_text场景  上面提到了MySQL 5.7.5引入的Deprecate EOF，实际上MySQL 5.7上对OK/EOF报文做了大量修改，使得client可以通过报文拿到更多的会话状态信息。方便中间层会话保持，主要涉及几个worklog：\nWL#4797: Extending protocol’s OK packet\nWL#6885: Flag to indicate session state\nWL#6128: Session Tracker: Add GTIDs context to the OK packet\nWL#6972: Collect GTIDs to include in the protocol’s OK packet\nWL#7766: Deprecate the EOF packet\nWL#6631: Detect transaction boundaries\n同时新增变量控制报文行为:\n  session_track_schema = [ON | OFF] ON时, 如果session中变更了当前database, OK报文中回返回新的database\n  session_track_state_change = [ON | OFF] ON时, 当发生会话环境改变时, 会给CLIENT返回一个FLAG(1)，会话环境变化包括：\n当前database\n系统变量\nUser-defined 变量\n临时表的变更\nprepare xxx\n 但是只通知变更发生，具体值是多少，还需要配合session_track_schema、session_track_system_variables使用，所以限制还是很多…\n  session_track_system_variables = [“list of string, seperated bt ‘,’”] 这个参数用来追踪的变量, 目前只有time_zone, autocommit, character_set_client, character_set_results, character_set_connection可选。当这些变量的值变动时，client可以收到variable_name: new_value的键值对\n  session_track_gtids = [OFF | OWN_GTID | ALL_GTIDS] OWN_GTID：在会话中产生新GTIDs（当然只读操作不会后推GTID位点）时，以字符串形式返回新增的GTIDs ALL_GTIDS：在每个包中返回当前的executed_gtid值，但是这样报文的payload很高，不推荐\n  session_track_transaction_info = [ON | OFF] 打开后, 通过标志位表示当前会话状态，有8bit可以表示状态信息（其中使用字符’_‘表示FALSE）：\n  T: 显示开启事务; I: 隐式开启事务（autocommit = 0）\n  r: 有非事务表读\n  R: 有事务表读\n  w: 非事务表写\n  W: 事务表写\n  s: 不安全函数（比如 select uuid()）\n  S: server返回结果集\n  L: 显示锁表(LOCK TABLES) 一个事务内，返回的状态值是累加的\n示例 表t1是InnoDB，表t2是MyISAM\nSTART TRANSACTION; // T_______ INSERT INTO t1 VALUES (1); // T___W___ INSERT INTO t2 VALUES (1); // T__wW___ SELECT f1 FROM t1; // T_RwW_S_ ... COMMIT/ROLLBACK;     OK和EOF报文在MySQL 5.6上是走不同的逻辑构造报文，但实际上都是返回一些执行状态。MySQL 5.7中的Deprecated EOF报文，实际上是复用了OK报文中新增的状态，但是实际上这两个报文还是不同的：\nOK Packet： header = 0 and length of packet \u0026gt; 7\nEOF Packet：header = 0xfe and length of packet \u0026lt; 9\n只是复用了在net_send_ok里的扩充逻辑。\n有了以上这些信息，我们可以做很多中间层的开发工作，比如读写分离就用状态追踪对外提供透明的读写分离。\n"},{"id":9,"href":"/docs/MySQL/Server/returning/","title":"Returning","section":"Server","content":"背景 #  MySQL对于statement执行结果报文通常分为两类：Resultset和OK/ERR，针对 DML语句则返回OK/ERR报文，其中包括几个影响记录，扫描记录等属性。但在很多业务场景下，通常 INSERT/UPDATE/DELETE 这样的DML语句后，都会跟随SELECT查询当前记录内容，以进行接下来的业务处理， 为了减少一次 Client \u0026lt;-\u0026gt; DB Server 交互，类似 PostgreSQL / Oracle 都提供了 returning clause 支持 DML 返回 Resultset。\nAliSQL 为了减少对 MySQL 语法兼容性的侵入，并支持 returning 功能， 采用了 native procedure 的方式，使用DBMS_TRANS package，统一使用 returning procedure 来支持 DML 语句返回 Resultset。\n语法 #  DBMS_TRANS.returning(Field_list=\u0026gt;, Statement=\u0026gt;); 其中:\n Field list : 代表期望的返回字段，以 “,” 进行分割，支持 * 号表达； Statement ：表示要执行的DML 语句， 支持 INSERT / UPDATE / DELETE；  INSERT Returning #  针对 insert 语句， returning proc 返回插入到表中的记录内容；\nmysql\u0026gt; CREATE TABLE `t` ( `id` int(11) NOT NULL AUTO_INCREMENT, `col1` int(11) NOT NULL DEFAULT '1', `col2` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (`id`) ) ENGINE=InnoDB; mysql\u0026gt; call dbms_trans.returning(\u0026quot;*\u0026quot;, \u0026quot;insert into t(id) values(NULL),(NULL)\u0026quot;); +----+------+---------------------+ | id | col1 | col2 | +----+------+---------------------+ | 1 | 1 | 2019-09-03 10:39:05 | | 2 | 1 | 2019-09-03 10:39:05 | +----+------+---------------------+ 2 rows in set (0.01 sec) 如果没有填入任何 Fields, returning 将退化成 OK/ERR 报文：\nmysql\u0026gt; call dbms_trans.returning(\u0026quot;\u0026quot;, \u0026quot;insert into t(id) values(NULL),(NULL)\u0026quot;); Query OK, 2 rows affected (0.01 sec) Records: 2 Duplicates: 0 Warnings: 0 mysql\u0026gt; select * from t; +----+------+---------------------+ | id | col1 | col2 | +----+------+---------------------+ | 1 | 1 | 2019-09-03 10:40:55 | | 2 | 1 | 2019-09-03 10:40:55 | | 3 | 1 | 2019-09-03 10:41:06 | | 4 | 1 | 2019-09-03 10:41:06 | +----+------+---------------------+ 4 rows in set (0.00 sec) 注意：INSERT returning 只支持 insert values 形式的语法，类似create as， insert select 不支持：\nmysql\u0026gt; call dbms_trans.returning(\u0026quot;\u0026quot;, \u0026quot;insert into t select * from t\u0026quot;); ERROR 7527 (HY000): Statement didn't support RETURNING clause UPDATE Returning #  针对 update 语句， returning 返回更新后的记录：\nmysql\u0026gt; call dbms_trans.returning(\u0026quot;id, col1, col2\u0026quot;, \u0026quot;update t set col1 = 2 where id \u0026gt;2\u0026quot;); +----+------+---------------------+ | id | col1 | col2 | +----+------+---------------------+ | 3 | 2 | 2019-09-03 10:41:06 | | 4 | 2 | 2019-09-03 10:41:06 | +----+------+---------------------+ 2 rows in set (0.01 sec) 注意: UPDATE returning 不支持多表 update 语句。\nDELETE Returning #  针对 delete 语句， returning 返回删除的记录前映像：\nmysql\u0026gt; call dbms_trans.returning(\u0026quot;id, col1, col2\u0026quot;, \u0026quot;delete from t where id \u0026lt; 3\u0026quot;); +----+------+---------------------+ | id | col1 | col2 | +----+------+---------------------+ | 1 | 1 | 2019-09-03 10:40:55 | | 2 | 1 | 2019-09-03 10:40:55 | +----+------+---------------------+ 2 rows in set (0.00 sec) 注意 #  1. 事务上下文 DBMS_TRANS.returning() 不是事务性语句，根据 DML statement 来继承 事务上下文， 结束事务需要显式的 COMMIT 或者 ROLLBACK。\n2. 字段不支持计算 Field list 中，只支持表中原生的字段，或者 * 号， 不支持进行计算或者聚合等操作。\n"},{"id":10,"href":"/docs/MySQL/Server/startup/","title":"Startup","section":"Server","content":"MySQL启动过程\nmain() // 入口 sql/main.cc mysqld_main() // sql/mysqld.cc // 记录入参 my_progname = argv[0]; orig_argc = argc; orig_argv = argv; // 处理配置文件my.cnf及启动参数 load_defaults(MYSQL_CONFIG_NAME, load_default_groups, \u0026amp;argc, \u0026amp;argv, \u0026amp;argv_alloc); // 继续处理启动参数，为初始化系统表做准备 sys_var::m_parse_flag == PARSE_EARLY handle_early_options(); // 为status统计计数做准备 init_sql_statement_names(); // 初始化system variables哈希表,链表sys_var_chain sys_var,遍历链表后,加入到system_variable_hash哈希表 // sys_var_chain链表已经通过sys_vars.cc的sys_var()构造函数static初始化 sys_var_init(); // 计算打开文件数并初始化table cache adjust_related_options(\u0026amp;requested_open_files); // init error log global variables init_error_log(); // init audit global variables mysql_audit_initialize(); // 初始化query log和slow log query_logger.init(); // 初始化system variables init_common_variables(); default_storage_engine= const_cast\u0026lt;char *\u0026gt;(\u0026quot;InnoDB\u0026quot;); // 设置默认storage engine add_status_vars(status_vars); // 初始化status变量(show status), status_vars为全局变量 set_server_version(); get_options(\u0026amp;remaining_argc, \u0026amp;remaining_argv); // sys_var::m_parse_flag == PARSE_NORMAL // 设置thread_cache_size init_client_errs(); // 读出给client返回出错信息的文件 lex_init(); // 初始化词法分析 item_create_init(); // 初始化函数列表 func_array为全局变量 // 设置默认字符集和校验字符集 global_system_variables.collation_connection= default_charset_info; global_system_variables.character_set_results= default_charset_info; global_system_variables.character_set_client= default_charset_info; // 设置默认storage engine lex_init(); // 初始化信号量 my_init_signals(); // 启动核心模块 init_server_components(); mdl_init();\t// mdl元数据锁 table_def_init(); // 表定义缓存 init_server_query_cache();\t// Query Cache init binlog relaylog\t// Binlog Relaylog gtid_server_init();\t// GTID plugin_register_builtin_and_init_core_se(); // Load builtin plugins, initialize MyISAM, CSV and InnoDB // 初始化并创建GTID init_server_auto_options(); // 初始化SSL init_ssl(); // 初始化网络 network_init(); // 创建PID文件 create_pid_file(); // 初始化status variables init_status_vars(); // binlog相关检查初始化 check_binlog_cache_size(NULL); check_binlog_stmt_cache_size(NULL); binlog_unsafe_map_init(); // 初始化Slave init_slave(); // 创建线程处理信号量 start_signal_handler(); // 如果是安装初始化，创建handle_bootstrap线程进行初始化datadir,系统表 if (opt_bootstrap) bootstrap(mysql_stdin); // 创建manager线程 start_handle_manager(); // 执行DDL crash recovery execute_ddl_log_recovery(); // 监听socket事件 mysqld_socket_acceptor-\u0026gt;connection_event_loop(); if (signal_thread_id.thread != 0) ret= my_thread_join(\u0026amp;signal_thread_id, NULL); clean_up(1); mysqld_exit(MYSQLD_SUCCESS_EXIT); 其中，load_defaults()会寻找my.cnf，并根据load_default_groups，使用search_default_file_with_ext()解析每一行配置，并进行标准化（配置项名称前加上\u0026ndash;）\n// sql/mysqld.cc 2325 const char *load_default_groups[]= { ... 2329 \u0026quot;mysqld\u0026quot;,\u0026quot;server\u0026quot;, MYSQL_BASE_VERSION, 0, 0}; // mysys_ssl/my_default.cc my_load_defaults my_search_option_files my_search_option_files search_default_file_with_ext 配置项会被handle_default_option()缓存在内存中\n// mysys_ssl/my_default.cc handle_default_option() struct handle_option_ctx { MEM_ROOT *alloc; My_args *m_args; TYPELIB *group; }; "},{"id":11,"href":"/docs/MySQL/Server/thd/","title":"Thd","section":"Server","content":"THD对象 #  THD封装了线程相关的数据，可以视作一个处理单元。\nThe size of the THD is ~10K and its definition is found in sql_class.h.\nThe THD is a large data structure which is used to keep track of various aspects of execution state. Memory rooted in the THD will grow significantly during query execution, but exactly how much it grows will depend upon the query. For memory planning purposes we recommend to plan for ~10MB per connection on average.\nFor each client connection we create a separate thread with THD serving as a thread/connection descriptor class THD { NET net; // client connection descriptor  Vio* active_vio; Protocol *m_protocol; // Current protocol  Protocol_text protocol_text; // Normal protocol  Protocol_binary protocol_binary; // Binary protocol  ... } Global_THD_manager #  Global_THD_manager作为thd管理器，统一提供thd资源的管控，提供thd的全局查找、计数、执行操作。\n生命周期 #  create_instance() // 创建thd_mgr，mysqld启动时 destroy_instance() // 销毁thd_mgr，mysqld关闭时 get_instance() // 在mysqld运行时获取thd_mgr，以调用其api API #  add_thd() // 添加thd remove_thd() // 移除thd wait_till_no_thd // 移除所有thd thd操作 #  查找 #  提供Find_THD_Impl函数模板，并由以下方法调用：\n find_thd  函数模板\nFind_THD_variable 在PS查看thd信息时提供并发控制（thd-\u0026gt;LOCK_thd_data） Find_thd_user_var 在PS查看thd信息时提供并发控制（thd-\u0026gt;LOCK_thd_data） ... 计数 #  num_thread_running thread_created\n执行操作 #  提供Do_THD_Impl函数模板，并由以下方法调用：\n do_for_all_thd_copy ：提供LOCK_thd_remove对remove thd进行并发控制 do_for_all_thd ：不做并发控制  函数模板\nSet_kill_conn // kill thd List_process_list // 列出所有thd ... kill process_id #  kill命令格式\nKILL [CONNECTION | QUERY] processlist_id 其中：\n CONNECTION：中止processlist_id对应的查询中止，连接退出 QUERY ：中止processlist_id对应的查询中止，连接保持 Ctrl+C ：MySQL client Ctrl+C会新建立一个临时的connection，将kill query的命令发送给MySQL，停止之前的命令，再回收掉临时的connection  处理kill #  kill的执行是异步的，分为标记kill和中止执行两阶段。\n标记kill #  当MySQL Server收到kill命令时，会根据命令中指定的process_id，查找到对应的THD，设置kill标记\nstatic uint kill_one_thread(THD *thd, my_thread_id id, bool only_kill_query) { THD *tmp= NULL; uint error=ER_NO_SUCH_THREAD; Find_thd_with_id find_thd_with_id(id); DBUG_ENTER(\u0026#34;kill_one_thread\u0026#34;); DBUG_PRINT(\u0026#34;enter\u0026#34;, (\u0026#34;id=%u only_kill=%d\u0026#34;, id, only_kill_query)); tmp= Global_THD_manager::get_instance()-\u0026gt;find_thd(\u0026amp;find_thd_with_id); ... tmp-\u0026gt;awake(only_kill_query ? THD::KILL_QUERY : THD::KILL_CONNECTION); ... } 中止执行 #   空闲的process_id立即退出  void THD::awake(THD::killed_state state_to_set) { ... if (this-\u0026gt;m_server_idle \u0026amp;\u0026amp; state_to_set == KILL_QUERY) { /* nothing */ } else { killed= state_to_set; } ... }  在SQL的执行过程中，会在各种位置检测THD上的kill标记，中止执行，清理后退出\n  等待中响应\n如果查询此时等待在某个condition_variable上，那么短时间内可能很难唤醒，如果出现了死锁的情况，那么就更不可能唤醒了。因此，kill实现了针对等待的特殊响应，其主要思路是：在某个查询进入等待状态之前，在THD上记录下当前查询等待的condition_variable对象及其对应的mutex。\nvoid enter_cond(mysql_cond_t *cond, mysql_mutex_t* mutex, const PSI_stage_info *stage, PSI_stage_info *old_stage, const char *src_function, const char *src_file, int src_line) { DBUG_ENTER(\u0026#34;THD::enter_cond\u0026#34;); mysql_mutex_assert_owner(mutex); /* Sic: We don\u0026#39;t lock LOCK_current_cond here. If we did, we could end up in deadlock with THD::awake() which locks current_mutex while LOCK_current_cond is locked. */ current_mutex= mutex; current_cond= cond; enter_stage(stage, old_stage, src_function, src_file, src_line); DBUG_VOID_RETURN; } 在等待的条件上增加对thd-\u0026gt;killed状态的判断，即检测到killed时退出等待\nlonglong Item_func_sleep::val_int() { THD *thd= current_thd; Interruptible_wait timed_cond(thd); mysql_cond_t cond; timeout= args[0]-\u0026gt;val_real(); mysql_cond_init(key_item_func_sleep_cond, \u0026amp;cond); mysql_mutex_lock(\u0026amp;LOCK_item_func_sleep); thd-\u0026gt;ENTER_COND(\u0026amp;cond, \u0026amp;LOCK_item_func_sleep, \u0026amp;stage_user_sleep, NULL); error= 0; thd_wait_begin(thd, THD_WAIT_SLEEP); while (!thd-\u0026gt;killed) { error= timed_cond.wait(\u0026amp;cond, \u0026amp;LOCK_item_func_sleep); if (error == ETIMEDOUT || error == ETIME) break; error= 0; } thd_wait_end(thd); mysql_mutex_unlock(\u0026amp;LOCK_item_func_sleep); thd-\u0026gt;EXIT_COND(NULL); mysql_cond_destroy(\u0026amp;cond); return MY_TEST(!error); // Return 1 killed } kill发生时, 使用THD记录的condition_variable进行pthread_cond_signal，进行唤醒，等待的线程醒来检测kill标记，发现已被标记kill快速退出。\nvoid THD::awake(THD::killed_state state_to_set) { ... /* Broadcast a condition to kick the target if it is waiting on it. */ if (is_killable) { mysql_mutex_lock(\u0026amp;LOCK_current_cond); /* This broadcast could be up in the air if the victim thread exits the cond in the time between read and broadcast, but that is ok since all we want to do is to make the victim thread get out of waiting on current_cond. If we see a non-zero current_cond: it cannot be an old value (because then exit_cond() should have run and it can\u0026#39;t because we have mutex); so it is the true value but maybe current_mutex is not yet non-zero (we\u0026#39;re in the middle of enter_cond() and there is a \u0026#34;memory order inversion\u0026#34;). So we test the mutex too to not lock 0. Note that there is a small chance we fail to kill. If victim has locked current_mutex, but hasn\u0026#39;t yet entered enter_cond() (which means that current_cond and current_mutex are 0), then the victim will not get a signal and it may wait \u0026#34;forever\u0026#34; on the cond (until we issue a second KILL or the status it\u0026#39;s waiting for happens). It\u0026#39;s true that we have set its thd-\u0026gt;killed but it may not see it immediately and so may have time to reach the cond_wait(). However, where possible, we test for killed once again after enter_cond(). This should make the signaling as safe as possible. However, there is still a small chance of failure on platforms with instruction or memory write reordering. */ if (current_cond \u0026amp;\u0026amp; current_mutex) { mysql_mutex_lock(current_mutex); mysql_cond_broadcast(current_cond); mysql_mutex_unlock(current_mutex); } mysql_mutex_unlock(\u0026amp;LOCK_current_cond); } DBUG_VOID_RETURN; }   "},{"id":12,"href":"/docs/MySQL/Server/vio/","title":"Vio","section":"Server","content":"VIO模块 #  为不同的protocol提供network I/O wrapper，类似于winsock。\nVirtual I/O Library.\nThe VIO routines are wrappers for the various network I/O calls that happen with different protocols. The idea is that in the main modules one won\u0026rsquo;t have to write separate bits of code for each protocol. Thus vio\u0026rsquo;s purpose is somewhat like the purpose of Microsoft\u0026rsquo;s winsock library. https://dev.mysql.com/doc/internals/en/vio-directory.html\n SOCKET封装了socket fd，里面只有fd信息。\n目前支持的protocol：\n TCP/IP Unix domain socket Named Pipes（Windows only） Shared Memory（Windows only） Secure Sockets（SSL）  Unix domain socket\n用于实现同一主机上的进程间通信，即使用socket文件来进行通信。socket原本是为网络通讯设计的，但后来在socket的框架上发展出一种IPC机制，就是UNIX domain socket。虽然网络socket也可用于同一台主机的进程间通讯(通过loopback地址127.0.0.1)，但是UNIX domain socket用于IPC 更有效率：不需要经过网络协议栈，不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程。这是因为，IPC机制本质上是可靠的通讯，而网络协议是为不可靠的通讯设计的。\n使用方式：\nsocket(AF_UNIX, \u0026hellip;)\n 文件组织 #  include/violite.h VIO lite（封装了VIO的struct和对外的function） vio_priv.h VIO模块内部头文件 vio.c Declarations + open/close functions viosocket.c Send/retrieve functions viossl.c SSL variations viosslfactories.c Certification / Verification viopipe.c named pipe implemenation（windows only） vioshm.c shared memory implementation（windows only） 文件的层次关系和用途如下图所示：\n设计 #  3.1 I/O事件 #  网络I/O事件分为读、写、连接：\n VIO_IO_EVENT_CONNECT IN VIO_IO_EVENT_READ IN VIO_IO_EVENT_WRITE OUT VIO对象 #  对于建链后的连接，两端都分别分配一个VIO对象，用于描述和处理网络I/O。\nclient和server支持的连接方式和属性：\nclient Unix domain socket VIO_TYPE_SOCKET VIO_LOCALHOST | VIO_BUFFERED_READ TCP/IP VIO_TYPE_TCPIP VIO_BUFFERED_READ Shared Memory VIO_TYPE_SHARED_MEMORY VIO_LOCALHOST Named Pipes VIO_TYPE_NAMEDPIPE VIO_LOCALHOST server Channel_info_local_socket VIO_TYPE_SOCKET VIO_LOCALHOST Channel_info_tcpip_socket VIO_TYPE_TCPIP VIO对象的数据结构\nstruct st_vio { MYSQL_SOCKET mysql_socket; // socket fd (TCP/IP and Unix domain socket)  my_bool localhost; // VIO_LOCALHOST  struct sockaddr_storage local; // local internet address  struct sockaddr_storage remote; // remote internet address  size_t addrLen; // remote address len  enum enum_vio_type type; // protocol type  my_bool inactive; // 连接不再活跃（已关闭）  char desc[VIO_DESCRIPTION_SIZE]; // debug  char *read_buffer; // buffer for vio_read_buff 16k  char *read_pos; // start of unfetched data in the read buffer  char *read_end; // end of unfetched data  int read_timeout; // 读超时  int write_timeout; // 写超时  // 通过vtable interface来对不同协议下的实现进行解耦（多态）  /* viodelete is responsible for cleaning up the VIO object by freeing internal buffers, closing descriptors, handles. */ void (*viodelete)(Vio*); int (*vioerrno)(Vio*); size_t (*read)(Vio*, uchar *, size_t); size_t (*write)(Vio*, const uchar *, size_t); int (*timeout)(Vio*, uint, my_bool); int (*viokeepalive)(Vio*, my_bool); int (*fastsend)(Vio*); my_bool (*peer_addr)(Vio*, char *, uint16*, size_t); void (*in_addr)(Vio*, struct sockaddr_storage*); my_bool (*should_retry)(Vio*); my_bool (*was_timeout)(Vio*); /* vioshutdown is resposnible to shutdown/close the channel, so that no further communications can take place, however any related buffers, descriptors, handles can remain valid after a shutdown. */ int (*vioshutdown)(Vio*); my_bool (*is_connected)(Vio*); my_bool (*has_data) (Vio*); int (*io_wait)(Vio*, enum enum_vio_io_event, int); my_bool (*connect)(Vio*, struct sockaddr *, socklen_t, int); }; VIO对象的创建、初始化和销毁：\n常用函数 #  VIO模块中的常用函数如下：\nint vio_io_wait // 等待网络I/O时间通知（poll/select） vio_read // io读 vio_read_buff // io缓冲读 vio_write // io写 vio_fastsend // 尽可能设为TCP_NODELAY vio_keepalive // 尽可能设置TCP保活 SO_KEEPALIVE vio_timeout // 设置超时 vio_should_retry // 是否需要重试read/write（SOCKET_EINTR） vio_was_timeout // 是否超时（SOCKET_ETIMEDOUT） vio_is_connected // 是否处于连接中，通过vio_io_ait尝试read/write，或者通过socket_peek_read看是否有可读的数据 vio_pending // 获得缓冲区还有多少数据可以读 ioctl(FIONREAD) debug使用 vio_description // 打印socket/TCP信息 vio-\u0026gt;desc debug使用 vio_type // 获得连接的protocol类型 vio_errno // 获取socket error vio_fd // 获得socket fd vio_socket_connect // client发起connect vio_set_blocking // 设置socket fd为阻塞/非阻塞 vio_getnameinfo // 获得socket可读信息 vio_peer_addr // 获得远程socket的可读地址 vio_get_normalized_ip_string // 获得socket可读信息 vio_is_no_name_error // 是否错误为EAI_NONAME - Neither nodename nor servname provided, or not known. 即Name resolution error. Your hostname is invalid. It's not resolving through DNS to any network location. PSI观测 #  MySQL通过PSI机制观测一些关键路径和节点，在处理网络I/O时，其中的观测点是等待网络读写事件。\n入口是\nint vio_io_wait // 等待网络I/O时间通知（poll/select） 通过PSI提供状态的监测。\n宏 1. 定义变量 #define MYSQL_SOCKET_WAIT_VARIABLES(LOCKER, STATE) \\ struct PSI_socket_locker* LOCKER; \\ PSI_socket_locker_state STATE; 2. 进入socket等待 #define MYSQL_START_SOCKET_WAIT(LOCKER, STATE, SOCKET, OP, COUNT) \\ LOCKER= inline_mysql_start_socket_wait(STATE, SOCKET, OP, COUNT,\\ __FILE__, __LINE__) 3. 结束socket等待 #define MYSQL_END_SOCKET_WAIT(LOCKER, COUNT) \\ inline_mysql_end_socket_wait(LOCKER, COUNT) 使用\nMYSQL_SOCKET_WAIT_VARIABLES(locker, state) // 定义socket locker和locker state MYSQL_START_SOCKET_WAIT(locker, \u0026amp;state, vio-\u0026gt;mysql_socket, PSI_SOCKET_SELECT, 0); poll/select... MYSQL_END_SOCKET_WAIT(locker, 0); 其中函数指针的管理如下：\nstart_socket_wait_v1_t start_socket_wait; 在pfs.cc中的PFS_v1注册 pfs_start_socket_wait_v1 end_socket_wait_v1_t end_socket_wait; 在pfs.cc中的PFS_v1注册 pfs_end_socket_wait_v1 参考链接 #  https://dev.mysql.com/doc/internals/en/vio-directory.html\n"},{"id":13,"href":"/menu/","title":"Index","section":"Rick's Blog","content":" MySQL  Server  MySQL启动过程 MySQL的连接和请求处理  THD Protocol  Returning   NET VIO   Thread Pool   InnoDB  概览 源码结构 基本数据结构和算法 os record page      "}]